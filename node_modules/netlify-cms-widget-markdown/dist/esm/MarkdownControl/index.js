function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import RawEditor from "./RawEditor";
import VisualEditor from "./VisualEditor";
const MODE_STORAGE_KEY = 'cms.md-mode';
let editorControl;

let _getEditorComponents = () => [];

export const getEditorControl = () => editorControl;
export const getEditorComponents = () => _getEditorComponents();
export default class MarkdownControl extends React.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleMode", mode => {
      this.setState({
        mode
      });
      localStorage.setItem(MODE_STORAGE_KEY, mode);
    });

    _defineProperty(this, "processRef", ref => this.ref = ref);

    editorControl = props.editorControl;
    _getEditorComponents = props.getEditorComponents;
    this.state = {
      mode: localStorage.getItem(MODE_STORAGE_KEY) || 'visual'
    };
  }

  render() {
    const _this$props = this.props,
          onChange = _this$props.onChange,
          onAddAsset = _this$props.onAddAsset,
          getAsset = _this$props.getAsset,
          value = _this$props.value,
          classNameWrapper = _this$props.classNameWrapper,
          field = _this$props.field,
          getEditorComponents = _this$props.getEditorComponents;
    const mode = this.state.mode;
    const visualEditor = React.createElement("div", {
      className: "cms-editor-visual",
      ref: this.processRef
    }, React.createElement(VisualEditor, {
      onChange: onChange,
      onAddAsset: onAddAsset,
      onMode: this.handleMode,
      getAsset: getAsset,
      className: classNameWrapper,
      value: value,
      field: field,
      getEditorComponents: getEditorComponents
    }));
    const rawEditor = React.createElement("div", {
      className: "cms-editor-raw",
      ref: this.processRef
    }, React.createElement(RawEditor, {
      onChange: onChange,
      onAddAsset: onAddAsset,
      onMode: this.handleMode,
      getAsset: getAsset,
      className: classNameWrapper,
      value: value,
      field: field
    }));
    return mode === 'visual' ? visualEditor : rawEditor;
  }

}

_defineProperty(MarkdownControl, "propTypes", {
  onChange: PropTypes.func.isRequired,
  onAddAsset: PropTypes.func.isRequired,
  getAsset: PropTypes.func.isRequired,
  classNameWrapper: PropTypes.string.isRequired,
  editorControl: PropTypes.func.isRequired,
  value: PropTypes.string,
  field: ImmutablePropTypes.map.isRequired,
  getEditorComponents: PropTypes.func
});

_defineProperty(MarkdownControl, "defaultProps", {
  value: ''
});