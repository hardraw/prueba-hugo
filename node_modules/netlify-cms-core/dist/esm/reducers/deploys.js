import { Map, fromJS } from 'immutable';
import { DEPLOY_PREVIEW_REQUEST, DEPLOY_PREVIEW_SUCCESS, DEPLOY_PREVIEW_FAILURE } from "../actions/deploys";

const deploys = function deploys() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Map({
    deploys: Map()
  });
  let action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case DEPLOY_PREVIEW_REQUEST:
      {
        const _action$payload = action.payload,
              collection = _action$payload.collection,
              slug = _action$payload.slug;
        return state.setIn(['deploys', `${collection}.${slug}`, 'isFetching'], true);
      }

    case DEPLOY_PREVIEW_SUCCESS:
      {
        const _action$payload2 = action.payload,
              collection = _action$payload2.collection,
              slug = _action$payload2.slug,
              url = _action$payload2.url,
              status = _action$payload2.status;
        return state.setIn(['deploys', `${collection}.${slug}`], fromJS({
          isFetching: false,
          url,
          status
        }));
      }

    case DEPLOY_PREVIEW_FAILURE:
      {
        const _action$payload3 = action.payload,
              collection = _action$payload3.collection,
              slug = _action$payload3.slug;
        return state.setIn(['deploys', `${collection}.${slug}`], fromJS({
          isFetching: false
        }));
      }

    default:
      return state;
  }
};

export const selectDeployPreview = (state, collection, slug) => state.getIn(['deploys', `${collection}.${slug}`]);
export default deploys;