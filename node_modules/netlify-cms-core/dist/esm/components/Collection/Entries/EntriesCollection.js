import _partial from "lodash/partial";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { connect } from 'react-redux';
import { Cursor } from 'netlify-cms-lib-util';
import { loadEntries as actionLoadEntries, traverseCollectionCursor as actionTraverseCollectionCursor } from "../../../actions/entries";
import { selectEntries } from "../../../reducers";
import { selectCollectionEntriesCursor } from "../../../reducers/cursors";
import Entries from "./Entries";

class EntriesCollection extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleCursorActions", (cursor, action) => {
      const _this$props = this.props,
            collection = _this$props.collection,
            traverseCollectionCursor = _this$props.traverseCollectionCursor;
      traverseCollectionCursor(collection, action);
    });
  }

  componentDidMount() {
    const _this$props2 = this.props,
          collection = _this$props2.collection,
          entriesLoaded = _this$props2.entriesLoaded,
          loadEntries = _this$props2.loadEntries;

    if (collection && !entriesLoaded) {
      loadEntries(collection);
    }
  }

  componentDidUpdate(prevProps) {
    const _this$props3 = this.props,
          collection = _this$props3.collection,
          entriesLoaded = _this$props3.entriesLoaded,
          loadEntries = _this$props3.loadEntries;

    if (collection !== prevProps.collection && !entriesLoaded) {
      loadEntries(collection);
    }
  }

  render() {
    const _this$props4 = this.props,
          collection = _this$props4.collection,
          entries = _this$props4.entries,
          publicFolder = _this$props4.publicFolder,
          isFetching = _this$props4.isFetching,
          viewStyle = _this$props4.viewStyle,
          cursor = _this$props4.cursor;
    return React.createElement(Entries, {
      collections: collection,
      entries: entries,
      publicFolder: publicFolder,
      isFetching: isFetching,
      collectionName: collection.get('label'),
      viewStyle: viewStyle,
      cursor: cursor,
      handleCursorActions: _partial(this.handleCursorActions, cursor)
    });
  }

}

_defineProperty(EntriesCollection, "propTypes", {
  collection: ImmutablePropTypes.map.isRequired,
  publicFolder: PropTypes.string.isRequired,
  entries: ImmutablePropTypes.list,
  isFetching: PropTypes.bool.isRequired,
  viewStyle: PropTypes.string,
  cursor: PropTypes.object.isRequired,
  loadEntries: PropTypes.func.isRequired,
  traverseCollectionCursor: PropTypes.func.isRequired
});

function mapStateToProps(state, ownProps) {
  const collection = ownProps.collection,
        viewStyle = ownProps.viewStyle;
  const config = state.config;
  const publicFolder = config.get('public_folder');
  const page = state.entries.getIn(['pages', collection.get('name'), 'page']);
  const entries = selectEntries(state, collection.get('name'));
  const entriesLoaded = !!state.entries.getIn(['pages', collection.get('name')]);
  const isFetching = state.entries.getIn(['pages', collection.get('name'), 'isFetching'], false);
  const rawCursor = selectCollectionEntriesCursor(state.cursors, collection.get('name'));
  const cursor = Cursor.create(rawCursor).clearData();
  return {
    publicFolder,
    collection,
    page,
    entries,
    entriesLoaded,
    isFetching,
    viewStyle,
    cursor
  };
}

const mapDispatchToProps = {
  loadEntries: actionLoadEntries,
  traverseCollectionCursor: actionTraverseCollectionCursor
};
export default connect(mapStateToProps, mapDispatchToProps)(EntriesCollection);