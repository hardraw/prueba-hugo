function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { connect } from 'react-redux';
import { Cursor } from 'netlify-cms-lib-util';
import { selectSearchedEntries } from "../../../reducers";
import { searchEntries as actionSearchEntries, clearSearch as actionClearSearch } from "../../../actions/search";
import Entries from "./Entries";

class EntriesSearch extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getCursor", () => {
      const page = this.props.page;
      return Cursor.create({
        actions: isNaN(page) ? [] : ['append_next']
      });
    });

    _defineProperty(this, "handleCursorActions", action => {
      const _this$props = this.props,
            page = _this$props.page,
            searchTerm = _this$props.searchTerm,
            searchEntries = _this$props.searchEntries;

      if (action === 'append_next') {
        const nextPage = page + 1;
        searchEntries(searchTerm, nextPage);
      }
    });
  }

  componentDidMount() {
    const _this$props2 = this.props,
          searchTerm = _this$props2.searchTerm,
          searchEntries = _this$props2.searchEntries;
    searchEntries(searchTerm);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.searchTerm === this.props.searchTerm) return;
    const searchEntries = prevProps.searchEntries;
    searchEntries(this.props.searchTerm);
  }

  componentWillUnmount() {
    this.props.clearSearch();
  }

  render() {
    const _this$props3 = this.props,
          collections = _this$props3.collections,
          entries = _this$props3.entries,
          publicFolder = _this$props3.publicFolder,
          isFetching = _this$props3.isFetching;
    return React.createElement(Entries, {
      cursor: this.getCursor(),
      handleCursorActions: this.handleCursorActions,
      collections: collections,
      entries: entries,
      publicFolder: publicFolder,
      isFetching: isFetching
    });
  }

}

_defineProperty(EntriesSearch, "propTypes", {
  isFetching: PropTypes.bool,
  searchEntries: PropTypes.func.isRequired,
  clearSearch: PropTypes.func.isRequired,
  searchTerm: PropTypes.string.isRequired,
  collections: ImmutablePropTypes.seq,
  entries: ImmutablePropTypes.list,
  page: PropTypes.number,
  publicFolder: PropTypes.string
});

function mapStateToProps(state, ownProps) {
  const searchTerm = ownProps.searchTerm;
  const collections = ownProps.collections.toIndexedSeq();
  const isFetching = state.search.get('isFetching');
  const page = state.search.get('page');
  const entries = selectSearchedEntries(state);
  const publicFolder = state.config.get('public_folder');
  return {
    isFetching,
    page,
    collections,
    entries,
    publicFolder,
    searchTerm
  };
}

const mapDispatchToProps = {
  searchEntries: actionSearchEntries,
  clearSearch: actionClearSearch
};
export default connect(mapStateToProps, mapDispatchToProps)(EntriesSearch);