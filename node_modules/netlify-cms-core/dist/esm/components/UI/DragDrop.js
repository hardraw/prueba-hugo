function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import ReactDNDHTML5Backend from 'react-dnd-html5-backend';
import { DragDropContext as ReactDNDDragDropContext, DragSource as ReactDNDDragSource, DropTarget as ReactDNDDropTarget } from 'react-dnd';
import React from 'react';
import PropTypes from 'prop-types';
export const DragSource = (_ref) => {
  let namespace = _ref.namespace,
      props = _objectWithoutProperties(_ref, ["namespace"]);

  const DragComponent = ReactDNDDragSource(namespace, {
    // eslint-disable-next-line no-unused-vars
    beginDrag(_ref2) {
      let children = _ref2.children,
          isDragging = _ref2.isDragging,
          connectDragComponent = _ref2.connectDragComponent,
          ownProps = _objectWithoutProperties(_ref2, ["children", "isDragging", "connectDragComponent"]);

      // We return the rest of the props as the ID of the element being dragged.
      return ownProps;
    }

  }, connect => ({
    connectDragComponent: connect.dragSource()
  }))((_ref3) => {
    let children = _ref3.children,
        connectDragComponent = _ref3.connectDragComponent;
    return children(connectDragComponent);
  });
  return React.createElement(DragComponent, props, props.children);
};
DragSource.propTypes = {
  namespace: PropTypes.any.isRequired,
  children: PropTypes.func.isRequired
};
export const DropTarget = (_ref4) => {
  let onDrop = _ref4.onDrop,
      namespace = _ref4.namespace,
      props = _objectWithoutProperties(_ref4, ["onDrop", "namespace"]);

  const DropComponent = ReactDNDDropTarget(namespace, {
    drop(ownProps, monitor) {
      onDrop(monitor.getItem());
    }

  }, (connect, monitor) => ({
    connectDropTarget: connect.dropTarget(),
    isHovered: monitor.isOver()
  }))((_ref5) => {
    let children = _ref5.children,
        connectDropTarget = _ref5.connectDropTarget,
        isHovered = _ref5.isHovered;
    return children(connectDropTarget, {
      isHovered
    });
  });
  return React.createElement(DropComponent, props, props.children);
};
DropTarget.propTypes = {
  onDrop: PropTypes.func.isRequired,
  namespace: PropTypes.any.isRequired,
  children: PropTypes.func.isRequired
};
export const HTML5DragDrop = component => ReactDNDDragDropContext(ReactDNDHTML5Backend)(component);