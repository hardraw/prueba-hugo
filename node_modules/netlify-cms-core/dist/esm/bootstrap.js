import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { Route } from 'react-router-dom';
import { ConnectedRouter } from 'react-router-redux';
import history from "./routing/history";
import store from "./redux";
import { mergeConfig } from "./actions/config";
import { getPhrases } from "./constants/defaultPhrases";
import { I18n } from 'react-polyglot';
import { GlobalStyles } from 'netlify-cms-ui-default';
import { ErrorBoundary } from "./components/UI";
import App from "./components/App/App";
import "./components/EditorWidgets";
import "./mediaLibrary";
import 'what-input';
const ROOT_ID = 'nc-root';

function bootstrap() {
  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const config = opts.config;
  /**
   * Log the version number.
   */

  if (typeof "2.10.0" === 'string') {
    console.log(`netlify-cms-core ${"2.10.0"}`);
  }
  /**
   * Get DOM element where app will mount.
   */


  function getRoot() {
    /**
     * Return existing root if found.
     */
    const existingRoot = document.getElementById(ROOT_ID);

    if (existingRoot) {
      return existingRoot;
    }
    /**
     * If no existing root, create and return a new root.
     */


    const newRoot = document.createElement('div');
    newRoot.id = ROOT_ID;
    document.body.appendChild(newRoot);
    return newRoot;
  }
  /**
   * Dispatch config to store if received. This config will be merged into
   * config.yml if it exists, and any portion that produces a conflict will be
   * overwritten.
   */


  if (config) {
    store.dispatch(mergeConfig(config));
  }
  /**
   * Create connected root component.
   */


  const Root = () => React.createElement(React.Fragment, null, React.createElement(GlobalStyles, null), React.createElement(I18n, {
    locale: 'en',
    messages: getPhrases()
  }, React.createElement(ErrorBoundary, {
    showBackup: true
  }, React.createElement(Provider, {
    store: store
  }, React.createElement(ConnectedRouter, {
    history: history
  }, React.createElement(Route, {
    component: App
  }))))));
  /**
   * Render application root.
   */


  render(React.createElement(Root, null), getRoot());
}

export default bootstrap;